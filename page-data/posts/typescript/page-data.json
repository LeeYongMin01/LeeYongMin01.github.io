{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/typescript/","result":{"pageContext":{"currentCategory":"typescript","categories":["All","frontend","javascript","work","story","react","git","infra","issues","typescript"],"edges":[{"node":{"id":"df74e1ae-129c-509e-ba71-f99478506966","excerpt":"✔ 사용하는 이유 제네릭은 코드의 재사용성과 유연성을 높이기 위해 사용한다. 함수나 클래스에서 사용할 타입을 나중에 결정할 수 있도록 허용하며, 동일한 함수나 클래스에서 여러 가지 타입을 다룰 수 있도록 한다. ✔ 제네릭 사용법 ① 타입 지정 위와 같이 제네릭을 이용하여 기본 타입을 설정할 수 있다. ② 빌트인 제네릭 ❓ 빌트인 제네릭이란? 타입스크립트에 내장된 제네릭으로, 타입스크립트에서 제공하는 내장 데이터 구조(Array, Promise, map 등)나 함수에서 사용된다. 위와 같이 DOM을 제어할 때 Element 타입 지정을 해야한다. ③ 제네릭 작성 함수 호출 타입과 리턴 타입이 같을 때, 제네릭을 이용하면 유용하다. 예를 들어, 위와 같이 item 객체를 리턴해주는 로직은 같지만 파라미터와 리턴의 타입이 다른 경우가 있다고 가정했을 때 제네릭을 사용하면 유용하다. 위에서 T는 타입을 의미하고 넣어주는 타입이 리턴 받는 타입이 된다. 어떤 타입을 받느냐에 따라 타입이 나…","fields":{"slug":"/typescript/typescript-02/"},"frontmatter":{"categories":"typescript","title":"타입스크립트 제네릭","date":"May 08, 2023"}},"next":{"fields":{"slug":"/typescript/typescript-01/"}},"previous":{"fields":{"slug":"/javascript/javascript-06/"}}},{"node":{"id":"d5451561-ec3e-5fc9-a041-f76708bcb210","excerpt":"✔ 사용하는 이유 자바스크립트는 원래 현재처럼 널리 쓰일 용도로 만들어지지 않았다. 그렇기 떄문에 특이점이 많고 문제가 발생할 소지를 가지고 있다. 예를 들어, 자바스크립트에서는 null이나 undefined에 값을 곱해도 오류가 출력되지 않는다. 오류로 출력되지 않기 때문에 처리하기가 까다롭고 이러한 점은 치명적인 오류와 버그로 이어질 수가 있다. 타입스크립트는 이러한 오류와 버그가 발생하는 것을 방지하기 위해 사용된다. ✔ 타입 사용법 기초 ① 기본 타입 지정 위와 같이 “변수명: 타입” 의 형태로 변수에 타입을 지정할 수 있다. 변수에 지정된 타입이 아닌 다른 타입의 값을 할당하려고 하면 오류가 발생한다. ② 함수 (1) 함수 파라미터, 리턴 타입 지정 위와 같이 파라미터의 타입과 리턴 타입을 할당할 수 있다. 선언된 함수의 리턴 타입과 다른 타입의 값을 리턴하는 로직을 구현하거나, 선언된 함수의 타입과 다른 타입의 아규먼트로 호출한다면 오류가 발생한다. (2) void 타입…","fields":{"slug":"/typescript/typescript-01/"},"frontmatter":{"categories":"typescript","title":"타입스크립트 기본개념","date":"May 03, 2023"}},"next":{"fields":{"slug":"/javascript/javascript-05/"}},"previous":{"fields":{"slug":"/typescript/typescript-02/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"],"slicesMap":{}}