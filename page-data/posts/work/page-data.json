{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/work/","result":{"pageContext":{"currentCategory":"work","categories":["All","frontend","javascript","work","story","react","git","infra","issues","typescript"],"edges":[{"node":{"id":"ec642ef4-15c5-567b-b5dc-8cdcba2bbc3b","excerpt":"소프트웨어 테스트와 TDD  이미지 출처: (https://www.fitaacademy.in/blog/why-do-we-need-software-testing/) 1. 소프트웨어 테스트 소프트웨어 테스트라는 것은 소프트웨어가 정상적으로 동작하는지 확인하는 것을 의미한다. 이전에는 개발자는 개발만하고 테스팅 과정에는 큰 관여를 하지 않았지만, 최근에는 개발자가 자동화 할 수 있는 소프트웨어 테스트를 구현하고 실행하는 것이 보편화 되어가고 있다. 코드를 통해 테스트를 자동화한다면 이점이 생긴다. 사람이 실행하는 것 보다 빠르다. 정해진 스크립트에 의해 일관성있게 동작하기 때문에 휴먼 에러를 기피할 수 있다. 피드백을 빠른 주기로 개발중에 받을 수 있다. 따라서, 소프트웨어 테스트를 통한 테스트의 자동화는 개발자의 생산성을 향상시킬 수 있다. 1-1. Unit Test 유닛 테스트는 테스트중에 가장 Low Level이고 가장 작은 범위를 테스트한다. 개별 함수, 메서드, 클래스, 컴포넌…","fields":{"slug":"/work/software-test/"},"frontmatter":{"categories":"work","title":"소프트웨어 테스트와 TDD","date":"September 18, 2023"}},"next":{"fields":{"slug":"/story/wanted-pre-onboarding-03/"}},"previous":{"fields":{"slug":"/javascript/javascript-08/"}}},{"node":{"id":"f8a21557-3d50-54f7-aaf5-3ea3f928edf2","excerpt":"✔ 협업을 위한 Husky \n이미지 출처: (https://dev.to/maithanhdanh/configuration-for-husky-pre-commit-1fo5) 1. Husky ESLint와 Prettier를 도입해도 사용자가 적용하지 않으면 문제가 생긴다. 따라서 자동화를 통해 강제성을 부여할 필요성이 생긴다. Git Hooks를 통해 Git 이벤트가 발생될 때 스크립트를 실행하여 자동화를 할 수 있다. Husky는 Git Hooks를 쉽게 설정하고 관리할 수 있게 도와준다. 2. Husky를 통한 Git hooks 적용 2-1. Husky 설치 2-2. 스크립트 추가 꼭 postinstall 프로퍼티로 사용해야한다. 이후에 clone 받아서 사용하는 사람이 npm install을 통해 husky install까지 한번에 설치하기 위해 설정한다. —cache 옵션은 한번 검증한 파일을 변화가 없다면 다시 검증하지 않기 위해 캐싱을 하게 하는 옵션이다. 2-3. pre-co…","fields":{"slug":"/work/husky/"},"frontmatter":{"categories":"work","title":"협업을 위한 Husky","date":"August 27, 2023"}},"next":{"fields":{"slug":"/git/git-01/"}},"previous":{"fields":{"slug":"/story/wanted-pre-onboarding-01/"}}},{"node":{"id":"adaecb63-abcc-5063-b92e-9eaf447d0328","excerpt":"✔ 협업을 위한 ESLint, Prettier \n이미지 출처: (https://muhaddis.info/automate-the-code-formatting-with-eslint-and-prettier/) 1. ESLint와 Prettier ❓ESLint와 Prettier를 사용해야 하는 이유 프로젝트에 참여하는 개발자들은 각기 코딩 스타일이 다르다. 그래서 다른 스타일을 가진 개발자가 코드를 보려면 피로도가 증가한다. 팀원과의 소통을 통해 어느정도 정할 수 있다고 해도, 그 갯수가 계속해서 증가한다면 한계가 생긴다. 코드 스타일 자동화를 통해 이를 해결할 수 있다. 이를 도와주는 대표적인 도구가 ESLint, Prettier이다. 2. ESLint 일관된 코드를 보장해주는 것이 ESLint의 역할이다. 코드의 구문을 분석하여 버그 발생의 여지가 있는 코드, 불필요한 코드, 위험성이 존재하는 코드 등에 대한 경고를 출력해준다. 2-1. 설치 2-2. 설정 루트 디렉토리에 .eslin…","fields":{"slug":"/work/eslint-prettier/"},"frontmatter":{"categories":"work","title":"협업을 위한 ESLint, Prettier","date":"August 26, 2023"}},"next":{"fields":{"slug":"/infra/gcp-03/"}},"previous":{"fields":{"slug":"/git/git-01/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"],"slicesMap":{}}